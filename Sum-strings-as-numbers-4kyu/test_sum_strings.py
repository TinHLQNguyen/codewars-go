import time
import pytest
from sum_strings import sum_strings


@pytest.mark.parametrize(
    "x,y,sum", [("1", "2", "3"), ("50", "20", "70"), ("11", "12", "23")]
)
def test_AddSmall(x, y, sum):
    assert sum_strings(x, y) == sum


@pytest.mark.parametrize(
    "x,y,sum",
    [
        ("01", "02", "3"),
        ("011", "2", "13"),
        ("00001", "02", "3"),
    ],
)
def test_LeadingZero(x, y, sum):
    assert sum_strings(x, y) == sum


@pytest.mark.parametrize(
    "x,y,sum",
    [
        ("0", "0", "0"),
        ("", "", "0"),
        ("0", "", "0"),
        ("5", "", "5"),
    ],
)
def test_ZeroCase(x, y, sum):
    assert sum_strings(x, y) == sum


@pytest.mark.parametrize(
    "x,y,sum",
    [
        ("9", "1", "10"),
        ("11", "12", "23"),
        ("1", "9999999999999999", "10000000000000000"),
        ("9999999999999999", "1", "10000000000000000"),
    ],
)
def test_ExtraDigit(x, y, sum):
    assert sum_strings(x, y) == sum


@pytest.mark.parametrize(
    "x,y,sum",
    [
        (
            "216321267166848412471324995114783456776771180109829202956536067232679842380856209927637550563907430921875900207728480986682979244173988737258625450013068656279385525689279532234925856095273023811457604813983875899990099802071419179774438002746734044416494299313055036477534",
            "40002539417118125",
            "216321267166848412471324995114783456776771180109829202956536067232679842380856209927637550563907430921875900207728480986682979244173988737258625450013068656279385525689279532234925856095273023811457604813983875899990099802071419179774438002746734044416494339315594453595659",
        ),
        (
            "2438816562168910268008263838662903457585979857197503086805096381105706851242380454407543814324076428380863577550218768765261509348627110218161918408217780047127191105083834283007377939549686166948925534481067400068934262009512158350727998045214857421490924662593803736328369547686448567797856038153147053563758503934790980747665448867024208391002651890147762070722020901215509791055853735001965882219262408787199919908261508934592102338319821728980373313819069304838739176674135568110308677014716888343926657044424194246235623512115365078824096211241659983559039707774044471843155371925861406696770421520009620806342579471808668614570994505040145895649472998795447590860366752643100017024385458823946779018848347408488303971896000357249249080870278834578833812497057136509096439773323028465577838069945589878564796674860235910258160979778813674786160357311655370088087698994876383616741264775710211288218383554790650566083050544612065661897164248382054542022603789484638606809129",
            "80487079158468091349683444764167911380750061755661384400323825388758016623666307886878763395534264577401585253840906650509035507559028162886402466509110230334174140513312661648450280567043033999727190739294142711310686901869273489683927188908148498395634172549516186453705033770558046885093884149068383126921363301066567120028235359967228969138806841195137598992637615662880662130921013172514433980702494703739789442787724021133922332093362354276422821865998173979244043744173224762909147123254213948961240342827244743986762614853029951174554881868711875143626892296150766716048901058946108380419405299895549247765131512701445417429396536625454440522654329737396891011211997866600011704469797052024096770256218781813727538987594693712733761051105179998119288048879451736287670429558060671469792974237068915425178908661276118660625403888368791223910056495631498352525028666777837270084806443765255744815182523748191694346801",
            "2438816562168910268008263838662903457585979857197503086885583460264174942592063899171711725704826490136524961950542594154019525972293418105040681803752044624528776358924740933516413447108714329835328000990177630403108402522824819999178278612257891421218115401887946447639056449555722057481783227061295551959392676484307167201370482637582255276096536039216145197643384202282076911084089094969194851358069249982337518900899124597472764469240834901494807294521564008578528619461859589244231009108079242620349478910422368225479667256288589841733243334495873932520280050601289215829917986778891357871325303388721495949969471767959435330619895563986254276068878298690996838625498265344545434453781995449401219541502677145885194983107998223849260785340075886602930582753275918322823978760917722178311599121050769876684084723739687646545831409336874346255953331548724285513266607656152502277366668664079002512128440050422148918608079211389902931981970692147310286837786313232830301155930",
        ),
    ],
)
def test_BigNumber(x, y, sum):
    startTime = time.perf_counter()
    assert sum_strings(x, y) == sum
    elaspedTime = time.perf_counter() - startTime
    assert elaspedTime < 500, f"Test took too long {elaspedTime: .2f } ms"


@pytest.mark.timeout(10)
@pytest.mark.parametrize("x, y", [("1234567890" * 1000000, "1234567890" * 100000)])
def test_VeryLongNumber(x, y):
    startTime = time.time()
    sum_strings(x, y)
    elaspedTime = time.time() - startTime
    assert elaspedTime < 10, f"Test took too long {elaspedTime: .2d } s"
